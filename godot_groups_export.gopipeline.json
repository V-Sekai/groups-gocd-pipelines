{
   "environment_variables": [
      {
         "name": "GODOT_STATUS",
         "value": "v_sekai"
      }
   ],
   "group": "beta",
   "label_template": "v_sekai.${groups_git_sandbox[:8]}.${godot-template-groups_pipeline_dependency}.${COUNT}",
   "materials": [
      {
         "branch": "master",
         "destination": "g",
         "name": "groups_git_sandbox",
         "type": "git",
         "url": "git@gitlab.com:SaracenOne/groups.git"
      },
      {
         "ignore_for_scheduling": false,
         "name": "godot-template-groups_pipeline_dependency",
         "pipeline": "godot-template-groups",
         "stage": "templateZipStage",
         "type": "dependency"
      },
      {
         "ignore_for_scheduling": false,
         "name": "gdnative-godot-speech_pipeline_dependency",
         "pipeline": "gdnative-godot-speech",
         "stage": "gdnativeBuildStage",
         "type": "dependency"
      },
      {
         "ignore_for_scheduling": false,
         "name": "gdnative-godot-openvr_pipeline_dependency",
         "pipeline": "gdnative-godot-openvr",
         "stage": "gdnativeBuildStage",
         "type": "dependency"
      }
   ],
   "name": "production-groups-release-export",
   "stages": [
      {
         "clean_workspace": false,
         "fetch_materials": true,
         "jobs": [
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "export_windows",
                     "type": "build"
                  }
               ],
               "name": "windowsJob",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": true,
                     "job": "defaultJob",
                     "pipeline": "godot-template-groups",
                     "source": "godot.templates.tpz",
                     "stage": "templateZipStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": true,
                     "job": "serverJob",
                     "pipeline": "godot-template-groups",
                     "source": "godot_server.x11.opt.tools.64.llvm",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_speech",
                     "is_source_a_file": true,
                     "job": "windowsJob",
                     "pipeline": "gdnative-godot-speech",
                     "source": "libGodotSpeech.dll",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_openvr",
                     "is_source_a_file": true,
                     "job": "windowsJob",
                     "pipeline": "gdnative-godot-openvr",
                     "source": "libgodot_openvr.dll",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_openvr",
                     "is_source_a_file": true,
                     "job": "windowsJob",
                     "pipeline": "gdnative-godot-openvr",
                     "source": "openvr_api.dll",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_speech",
                     "is_source_a_file": true,
                     "job": "windowsJob",
                     "pipeline": "gdnative-godot-speech",
                     "source": "debug/libGodotSpeech.pdb",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_openvr",
                     "is_source_a_file": true,
                     "job": "windowsJob",
                     "pipeline": "gdnative-godot-openvr",
                     "source": "debug/libgodot_openvr.pdb",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -rf templates && unzip \"godot.templates.tpz\" && mkdir pdbs && mv templates/*.pdb pdbs && export VERSION=\"`cat templates/version.txt`\" && export TEMPLATEDIR=\".local/share/godot/templates/$VERSION\" && export BASEDIR=\"`pwd`\" && rm -rf \"$TEMPLATEDIR\" && mkdir -p \"$TEMPLATEDIR\" && cd \"$TEMPLATEDIR\" && mv \"$BASEDIR\"/templates/* . && ln server_* \"$BASEDIR/templates/\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp -p godot_speech/libGodotSpeech.dll g/addons/godot_speech/bin/"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp -p godot_openvr/libgodot_openvr.dll godot_openvr/openvr_api.dll g/addons/godot-openvr/bin/win64/"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "(echo \"## AUTOGENERATED BY BUILD\"; echo \"\"; echo \"const BUILD_LABEL = \\\"$GO_PIPELINE_LABEL\\\"\"; echo \"const BUILD_DATE_STR = \\\"$(date --utc --iso=seconds)\\\"\"; echo \"const BUILD_UNIX_TIME = $(date +%s)\" ) > addons/vsk_version/build_constants.gd"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -rf export_windows && mkdir export_windows && chmod +x godot_server.x11.opt.tools.64.llvm && HOME=\"`pwd`\" ./godot_server.x11.opt.tools.64.llvm --export \"Windows Desktop\" \"`pwd`\"/export_windows/v_sekai_windows.exe --path g -v"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp -a g/addons/vr_manager/openvr/actions export_windows/"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp -p pdbs/*.pdb godot_speech/*.pdb godot_openvr/*.pdb export_windows/"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "export_linux_x11",
                     "type": "build"
                  }
               ],
               "name": "linuxDesktopJob",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": true,
                     "job": "defaultJob",
                     "pipeline": "godot-template-groups",
                     "source": "godot.templates.tpz",
                     "stage": "templateZipStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": true,
                     "job": "serverJob",
                     "pipeline": "godot-template-groups",
                     "source": "godot_server.x11.opt.tools.64.llvm",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_speech",
                     "is_source_a_file": true,
                     "job": "linuxJob",
                     "pipeline": "gdnative-godot-speech",
                     "source": "libGodotSpeech.so",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_openvr",
                     "is_source_a_file": true,
                     "job": "linuxJob",
                     "pipeline": "gdnative-godot-openvr",
                     "source": "libgodot_openvr.so",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_openvr",
                     "is_source_a_file": true,
                     "job": "linuxJob",
                     "pipeline": "gdnative-godot-openvr",
                     "source": "libopenvr_api.so",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -rf templates && unzip \"godot.templates.tpz\" && mkdir pdbs && mv templates/*.pdb pdbs && export VERSION=\"`cat templates/version.txt`\" && export TEMPLATEDIR=\".local/share/godot/templates/$VERSION\" && export BASEDIR=\"`pwd`\" && rm -rf \"$TEMPLATEDIR\" && mkdir -p \"$TEMPLATEDIR\" && cd \"$TEMPLATEDIR\" && mv \"$BASEDIR\"/templates/* . && ln server_* \"$BASEDIR/templates/\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp -p godot_speech/libGodotSpeech.so g/addons/godot_speech/bin/libGodotSpeech.so"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp -p godot_openvr/libgodot_openvr.so godot_openvr/libopenvr_api.so g/addons/godot-openvr/bin/x11/"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "(echo \"## AUTOGENERATED BY BUILD\"; echo \"\"; echo \"const BUILD_LABEL = \\\"$GO_PIPELINE_LABEL\\\"\"; echo \"const BUILD_DATE_STR = \\\"$(date --utc --iso=seconds)\\\"\"; echo \"const BUILD_UNIX_TIME = $(date +%s)\" ) > addons/vsk_version/build_constants.gd"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -rf export_linux_x11 && mkdir export_linux_x11 && chmod +x godot_server.x11.opt.tools.64.llvm && HOME=\"`pwd`\" ./godot_server.x11.opt.tools.64.llvm --export \"Linux/X11\" \"`pwd`\"/export_linux_x11/v_sekai_linux_x11 --path g -v"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp -a g/addons/vr_manager/openvr/actions export_linux_x11/"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "mv export_linux_x11/ linux_x11"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "tee v_sekai_linux_x11.desktop <<<\"[Desktop Entry]\\nIcon=v_sekai_linux_x11.svg\\nName=Godot Game Engine\\nComment=V-Sekai Client\\nExec=godot.x11.opt.tools.64\\nTerminal=false\\nType=Application\\nCategories=Utility;Application;\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "curl -L https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -o linuxdeploy-x86_64.AppImage"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "chmod a+x linuxdeploy-x86_64.AppImage"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "./linuxdeploy-x86_64.AppImage --appimage-extract"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "touch v_sekai_linux_x11.svg"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cd linux_x11 && ../squashfs-root/AppRun -d ../v_sekai_linux_x11.desktop --icon-file=../v_sekai_linux_x11.svg --appdir ../export_linux_x11"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "export_linux_server",
                     "type": "build"
                  }
               ],
               "name": "linuxServerJob",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": true,
                     "job": "defaultJob",
                     "pipeline": "godot-template-groups",
                     "source": "godot.templates.tpz",
                     "stage": "templateZipStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": true,
                     "job": "serverJob",
                     "pipeline": "godot-template-groups",
                     "source": "godot_server.x11.opt.tools.64.llvm",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_speech",
                     "is_source_a_file": true,
                     "job": "linuxJob",
                     "pipeline": "gdnative-godot-speech",
                     "source": "libGodotSpeech.so",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_openvr",
                     "is_source_a_file": true,
                     "job": "linuxJob",
                     "pipeline": "gdnative-godot-openvr",
                     "source": "libgodot_openvr.so",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "godot_openvr",
                     "is_source_a_file": true,
                     "job": "linuxJob",
                     "pipeline": "gdnative-godot-openvr",
                     "source": "libopenvr_api.so",
                     "stage": "gdnativeBuildStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -rf templates && unzip \"godot.templates.tpz\" && mkdir pdbs && mv templates/*.pdb pdbs && export VERSION=\"`cat templates/version.txt`\" && export TEMPLATEDIR=\".local/share/godot/templates/$VERSION\" && export BASEDIR=\"`pwd`\" && rm -rf \"$TEMPLATEDIR\" && mkdir -p \"$TEMPLATEDIR\" && cd \"$TEMPLATEDIR\" && mv \"$BASEDIR\"/templates/* . && ln server_* \"$BASEDIR/templates/\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp -p godot_speech/libGodotSpeech.so g/addons/godot_speech/bin/libGodotSpeech.so"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "(echo \"## AUTOGENERATED BY BUILD\"; echo \"\"; echo \"const BUILD_LABEL = \\\"$GO_PIPELINE_LABEL\\\"\"; echo \"const BUILD_DATE_STR = \\\"$(date --utc --iso=seconds)\\\"\"; echo \"const BUILD_UNIX_TIME = $(date +%s)\" ) > addons/vsk_version/build_constants.gd"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -rf export_linux_server && mkdir export_linux_server && chmod +x godot_server.x11.opt.tools.64.llvm && HOME=\"`pwd`\" ./godot_server.x11.opt.tools.64.llvm --export \"Linux/Server\" \"`pwd`\"/export_linux_server/v_sekai_linux_server --path g -v"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -f export_linux_server/*.so"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  }
               ]
            }
         ],
         "name": "exportStage"
      },
      {
         "clean_workspace": false,
         "jobs": [
            {
               "name": "windowsJob",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": false,
                     "job": "windowsJob",
                     "pipeline": "production-groups-release-export",
                     "source": "export_windows",
                     "stage": "exportStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "butler push export_windows $ITCHIO_LOGIN:windows-master --userversion $GO_PIPELINE_LABEL-`date --iso=seconds --utc`"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  }
               ]
            },
            {
               "name": "linuxDesktopJob",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": false,
                     "job": "linuxDesktopJob",
                     "pipeline": "production-groups-release-export",
                     "source": "export_linux_x11",
                     "stage": "exportStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "butler push export_linux_x11 $ITCHIO_LOGIN:x11-master --userversion $GO_PIPELINE_LABEL-`date --iso=seconds --utc`"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  }
               ]
            },
            {
               "name": "linuxServerJob",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "artifact_origin": "gocd",
                     "destination": "",
                     "is_source_a_file": false,
                     "job": "linuxServerJob",
                     "pipeline": "production-groups-release-export",
                     "source": "export_linux_server",
                     "stage": "exportStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "butler push export_linux_server $ITCHIO_LOGIN:server-master --userversion $GO_PIPELINE_LABEL-`date --iso=seconds --utc`"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": ""
                  }
               ]
            }
         ],
         "name": "uploadStage"
      }
   ]
}
