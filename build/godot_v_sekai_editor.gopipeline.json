{
   "environment_variables": [
      {
         "name": "GODOT_STATUS",
         "value": "groups-4.0.0"
      }
   ],
   "group": "gamma",
   "label_template": "groups-4.0.0.${godot_sandbox[:8]}.${COUNT}",
   "materials": [
      {
         "branch": "groups-4.x",
         "destination": "g",
         "name": "godot_sandbox",
         "type": "git",
         "url": "https://github.com/V-Sekai/godot.git"
      }
   ],
   "name": "godot-groups-editor",
   "stages": [
      {
         "jobs": [
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/godot.windows.editor.double.x86_64.llvm.exe",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/godot.windows.editor.double.x86_64.llvm.pdb",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  },
                  {
                     "name": "PATH",
                     "value": "/opt/llvm-mingw/bin:$PATH"
                  }
               ],
               "name": "windows_job",
               "resources": [
                  "mingw5",
                  "linux"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python -c \nimport re\n\nwith open('version.py', 'r') as f:\n  lines = f.readlines()\n\nwith open('version.py', 'w') as f:\n  for line in lines:\n    if line.startswith('status ='):\n      f.write(f'status = \"$GODOT_STATUS.$GO_PIPELINE_COUNTER\"\n')\n    else:\n      f.write(line)\n"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "mkdir -p $SCONS_CACHE scons werror=no platform=windows target=editor use_lto=no deprecated=no precision=double use_mingw=yes use_llvm=yes use_thinlto=no warnings=no LINKFLAGS=-Wl,-pdb= CCFLAGS='-Wall -Wno-tautological-compare -g -gcodeview' debug_symbols=no"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/godot.linuxbsd.editor.double.x86_64.llvm",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  }
               ],
               "name": "linux_job",
               "resources": [
                  "mingw5",
                  "linux"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python -c \nimport re\n\nwith open('version.py', 'r') as f:\n  lines = f.readlines()\n\nwith open('version.py', 'w') as f:\n  for line in lines:\n    if line.startswith('status ='):\n      f.write(f'status = \"$GODOT_STATUS.$GO_PIPELINE_COUNTER\"\n')\n    else:\n      f.write(line)\n"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "mkdir -p $SCONS_CACHE scons werror=no platform=linuxbsd target=editor use_lto=no deprecated=no precision=double use_static_cpp=yes use_llvm=yes builtin_freetype=yes"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/godot.web.template_release.double.wasm32.zip",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  },
                  {
                     "name": "EM_CACHE",
                     "value": "/tmp"
                  }
               ],
               "name": "web_job",
               "resources": [
                  "mingw5",
                  "linux"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python -c \nimport re\n\nwith open('version.py', 'r') as f:\n  lines = f.readlines()\n\nwith open('version.py', 'w') as f:\n  for line in lines:\n    if line.startswith('status ='):\n      f.write(f'status = \"$GODOT_STATUS.$GO_PIPELINE_COUNTER\"\n')\n    else:\n      f.write(line)\n"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "source /opt/emsdk/emsdk_env.sh && mkdir -p ../.cicd_cache scons werror=no platform=web target=template_release use_lto=no deprecated=no optimize=speed use_llvm=yes precision=double builtin_freetype=yes initial_memory=256 CCFLAGS='-fno-stack-protector -fno-exceptions'"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            }
         ],
         "name": "defaultStage"
      },
      {
         "jobs": [
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/windows_debug_x86_64.exe",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/windows_release_x86_64.exe",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/version.txt",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  },
                  {
                     "name": "PATH",
                     "value": "/opt/llvm-mingw/bin:$PATH"
                  }
               ],
               "name": "windows_job",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python -c \"import re; import os; f = open('version.py', 'r+'); text = f.read(); text = re.sub(r'(?<=^status =).*', ' = \\\"' + os.environ['GODOT_STATUS'] + '.' + os.environ['GO_PIPELINE_COUNTER'] + '\\\"', text); f.seek(0); f.write(text); f.truncate(); f.close()\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "g/bin/",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "godot.windows.editor.double.x86_64.llvm.exe",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp bin/godot.windows.editor.double.x86_64.llvm.exe bin/windows_debug_x86_64.exe && cp bin/godot.windows.editor.double.x86_64.llvm.exe bin/windows_release_x86_64.exe && mingw-strip --strip-debug bin/windows_release_x86_64.exe"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python -c \"\nimport re\nfrom pathlib import Path\n\nversion_file = Path('version.py').read_text()\nversion_dict = dict(re.findall(r'(\\w+)\\s*=\\s*(\\S+)', version_file))\n\nfor key, value in version_dict.items():\n  print(f'{key}={value}')\n\" > temp.sh\nsource temp.sh\nrm temp.sh\n\ndeclare \"_tmp%(patch)s=.$(patch)\" \"_tmp0=\" \"_tmp=_tmp%(patch)s\"\necho $major.$minor${!_tmp}.$GODOT_STATUS.$GO_PIPELINE_COUNTER > bin/version.txt"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/linux_debug.x86_64",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/linux_release.x86_64",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/version.txt",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  }
               ],
               "name": "linux_job",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python -c \"import re; import os; f = open('version.py', 'r+'); text = f.read(); text = re.sub(r'(?<=^status =).*', ' = \\\"' + os.environ['GODOT_STATUS'] + '.' + os.environ['GO_PIPELINE_COUNTER'] + '\\\"', text); f.seek(0); f.write(text); f.truncate(); f.close()\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "g/bin/",
                     "is_source_a_file": true,
                     "job": "linux_job",
                     "pipeline": "godot-groups-editor",
                     "source": "godot.linuxbsd.editor.double.x86_64.llvm",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp bin/godot.linuxbsd.editor.double.x86_64.llvm bin/linux_debug.x86_64 && cp bin/godot.linuxbsd.editor.double.x86_64.llvm bin/linux_release.x86_64 && strip --strip-debug bin/linux_release.x86_64"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python -c \"\nimport re\nfrom pathlib import Path\n\nversion_file = Path('version.py').read_text()\nversion_dict = dict(re.findall(r'(\\w+)\\s*=\\s*(\\S+)', version_file))\n\nfor key, value in version_dict.items():\n  print(f'{key}={value}')\n\" > temp.sh\nsource temp.sh\nrm temp.sh\n\ndeclare \"_tmp%(patch)s=.$(patch)\" \"_tmp0=\" \"_tmp=_tmp%(patch)s\"\necho $major.$minor${!_tmp}.$GODOT_STATUS.$GO_PIPELINE_COUNTER > bin/version.txt"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/web_debug.zip",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/web_release.zip",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/version.txt",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  },
                  {
                     "name": "EM_CACHE",
                     "value": "/tmp"
                  }
               ],
               "name": "web_job",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python -c \"import re; import os; f = open('version.py', 'r+'); text = f.read(); text = re.sub(r'(?<=^status =).*', ' = \\\"' + os.environ['GODOT_STATUS'] + '.' + os.environ['GO_PIPELINE_COUNTER'] + '\\\"', text); f.seek(0); f.write(text); f.truncate(); f.close()\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "g/bin/",
                     "is_source_a_file": true,
                     "job": "web_job",
                     "pipeline": "godot-groups-editor",
                     "source": "godot.web.template_release.double.wasm32.zip",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "cp bin/godot.web.template_release.double.wasm32.zip bin/web_debug.zip && cp bin/godot.web.template_release.double.wasm32.zip bin/web_release.zip"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python -c \"\nimport re\nfrom pathlib import Path\n\nversion_file = Path('version.py').read_text()\nversion_dict = dict(re.findall(r'(\\w+)\\s*=\\s*(\\S+)', version_file))\n\nfor key, value in version_dict.items():\n  print(f'{key}={value}')\n\" > temp.sh\nsource temp.sh\nrm temp.sh\n\ndeclare \"_tmp%(patch)s=.$(patch)\" \"_tmp0=\" \"_tmp=_tmp%(patch)s\"\necho $major.$minor${!_tmp}.$GODOT_STATUS.$GO_PIPELINE_COUNTER > bin/version.txt"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            }
         ],
         "name": "templateStage"
      },
      {
         "jobs": [
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "godot.templates.tpz",
                     "type": "build"
                  }
               ],
               "name": "defaultJob",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "rm -rf templates"
                     ],
                     "command": "/bin/bash",
                     "type": "exec"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "version.txt",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "godot.windows.editor.double.x86_64.llvm.pdb",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "windows_debug_x86_64.exe",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "windows_release_x86_64.exe",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "linux_job",
                     "pipeline": "godot-groups-editor",
                     "source": "linux_debug.x86_64",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "linux_job",
                     "pipeline": "godot-groups-editor",
                     "source": "linux_release.x86_64",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "web_job",
                     "pipeline": "godot-groups-editor",
                     "source": "web_debug.zip",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "web_job",
                     "pipeline": "godot-groups-editor",
                     "source": "web_release.zip",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -rf godot.templates.tpz"
                     ],
                     "command": "/bin/bash",
                     "type": "exec"
                  },
                  {
                     "arguments": [
                        "-c",
                        "zip -1 godot.templates.tpz templates/*"
                     ],
                     "command": "/bin/bash",
                     "type": "exec"
                  }
               ]
            }
         ],
         "name": "templateZipStage"
      }
   ],
   "timer": {
      "only_on_changes": true,
      "spec": "* * * * * ?"
   }
}
