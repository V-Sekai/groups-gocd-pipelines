{
   "environment_variables": [
      {
         "name": "GODOT_STATUS",
         "value": "groups-4.0.0"
      }
   ],
   "group": "gamma",
   "label_template": "groups-4.0.0.${godot_sandbox[:8]}.${COUNT}",
   "materials": [
      {
         "branch": "groups-4.x",
         "destination": "g",
         "name": "godot_sandbox",
         "type": "git",
         "url": "https://github.com/V-Sekai/godot.git"
      }
   ],
   "name": "godot-groups-editor",
   "stages": [
      {
         "jobs": [
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/godot.windows.editor.double.x86_64.llvm.exe",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/godot.windows.editor.double.x86_64.llvm.pdb",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  },
                  {
                     "name": "PATH",
                     "value": "/opt/llvm-mingw/bin:$PATH"
                  }
               ],
               "name": "windows_job",
               "resources": [
                  "mingw5",
                  "linux"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "import re; import os; with open(\"version.py\", \"r+\") as f: content = f.read(); f.seek(0); f.write(re.sub(r\"(?<=status =).*\", \" = '\" + os.getenv(\"GODOT_STATUS\") + \".\" + os.getenv(\"GO_PIPELINE_COUNTER\") + \"'\", content, flags=re.MULTILINE))"
                     ],
                     "command": "python3",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "mkdir -p $SCONS_CACHE && scons werror=no platform=windows target=editor use_lto=no deprecated=no precision=double use_mingw=yes use_llvm=yes use_thinlto=no warnings=no LINKFLAGS=-Wl,-pdb= CCFLAGS='-Wall -Wno-tautological-compare -g -gcodeview' debug_symbols=no"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/godot.linuxbsd.editor.double.x86_64.llvm",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  }
               ],
               "name": "linux_job",
               "resources": [
                  "mingw5",
                  "linux"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "import re; import os; with open(\"version.py\", \"r+\") as f: content = f.read(); f.seek(0); f.write(re.sub(r\"(?<=status =).*\", \" = '\" + os.getenv(\"GODOT_STATUS\") + \".\" + os.getenv(\"GO_PIPELINE_COUNTER\") + \"'\", content, flags=re.MULTILINE))"
                     ],
                     "command": "python3",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "mkdir -p $SCONS_CACHE && scons werror=no platform=linuxbsd target=editor use_lto=no deprecated=no precision=double use_static_cpp=yes use_llvm=yes builtin_freetype=yes"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/godot.web.template_release.double.wasm32.zip",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  },
                  {
                     "name": "EM_CACHE",
                     "value": "/tmp"
                  }
               ],
               "name": "web_job",
               "resources": [
                  "mingw5",
                  "linux"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "import re; import os; with open(\"version.py\", \"r+\") as f: content = f.read(); f.seek(0); f.write(re.sub(r\"(?<=status =).*\", \" = '\" + os.getenv(\"GODOT_STATUS\") + \".\" + os.getenv(\"GO_PIPELINE_COUNTER\") + \"'\", content, flags=re.MULTILINE))"
                     ],
                     "command": "python3",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "source /opt/emsdk/emsdk_env.sh && mkdir -p ../.cicd_cache && scons werror=no platform=web target=template_release use_lto=no deprecated=no optimize=speed use_llvm=yes precision=double builtin_freetype=yes initial_memory=256 CCFLAGS='-fno-stack-protector -fno-exceptions'"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            }
         ],
         "name": "defaultStage"
      },
      {
         "jobs": [
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/windows_debug_x86_64.exe",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/windows_release_x86_64.exe",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/version.txt",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  },
                  {
                     "name": "PATH",
                     "value": "/opt/llvm-mingw/bin:$PATH"
                  }
               ],
               "name": "windows_job",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python3 -c \"import os, re; [print(re.sub(r'status =.*', f'status = \\\\\"{os.getenv(\\\\\"GODOT_STATUS\\\\\")}.{os.getenv(\\\\\"GO_PIPELINE_COUNTER\\\\\")}\\\\\"', line) if line.startswith('status =') else line, end='') for line in open('version.py')]\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "g/bin/",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "godot.windows.editor.double.x86_64.llvm.exe",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python3 -c 'import re; import os; with open(\"version.py\", \"r+\") as f: content = f.read(); f.seek(0); f.write(re.sub(r\"(?<=^status =).*\", \" = \\\\'\" + os.getenv(\"GODOT_STATUS\") + \".\" + os.getenv(\"GO_PIPELINE_COUNTER\") + \"\\\\'\", content, flags=re.MULTILINE))'"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python3 -c \"import version; patch = '.' + str(version.patch) if hasattr(version, 'patch') else ''; print(f'{version.major}.{version.minor}{patch}.{version.GODOT_STATUS}.{version.GO_PIPELINE_COUNTER}')\" > bin/version.txt"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/linux_debug.x86_64",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/linux_release.x86_64",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/version.txt",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  }
               ],
               "name": "linux_job",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python3 -c \"import os, re; [print(re.sub(r'status =.*', f'status = \\\\\"{os.getenv(\\\\\"GODOT_STATUS\\\\\")}.{os.getenv(\\\\\"GO_PIPELINE_COUNTER\\\\\")}\\\\\"', line) if line.startswith('status =') else line, end='') for line in open('version.py')]\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "g/bin/",
                     "is_source_a_file": true,
                     "job": "linux_job",
                     "pipeline": "godot-groups-editor",
                     "source": "godot.linuxbsd.editor.double.x86_64.llvm",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python3 -c 'import re; import os; with open(\"version.py\", \"r+\") as f: content = f.read(); f.seek(0); f.write(re.sub(r\"(?<=^status =).*\", \" = \\\\'\" + os.getenv(\"GODOT_STATUS\") + \".\" + os.getenv(\"GO_PIPELINE_COUNTER\") + \"\\\\'\", content, flags=re.MULTILINE))'"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python3 -c \"import version; patch = '.' + str(version.patch) if hasattr(version, 'patch') else ''; print(f'{version.major}.{version.minor}{patch}.{version.GODOT_STATUS}.{version.GO_PIPELINE_COUNTER}')\" > bin/version.txt"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            },
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "g/bin/web_debug.zip",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/web_release.zip",
                     "type": "build"
                  },
                  {
                     "destination": "",
                     "source": "g/bin/version.txt",
                     "type": "build"
                  }
               ],
               "environment_variables": [
                  {
                     "name": "SCONS_CACHE",
                     "value": "/godata/scons_cache"
                  },
                  {
                     "name": "EM_CACHE",
                     "value": "/tmp"
                  }
               ],
               "name": "web_job",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "python3 -c \"import os, re; [print(re.sub(r'status =.*', f'status = \\\\\"{os.getenv(\\\\\"GODOT_STATUS\\\\\")}.{os.getenv(\\\\\"GO_PIPELINE_COUNTER\\\\\")}\\\\\"', line) if line.startswith('status =') else line, end='') for line in open('version.py')]\""
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "g/bin/",
                     "is_source_a_file": true,
                     "job": "web_job",
                     "pipeline": "godot-groups-editor",
                     "source": "godot.web.template_release.double.wasm32.zip",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python3 -c 'import re; import os; with open(\"version.py\", \"r+\") as f: content = f.read(); f.seek(0); f.write(re.sub(r\"(?<=^status =).*\", \" = \\\\'\" + os.getenv(\"GODOT_STATUS\") + \".\" + os.getenv(\"GO_PIPELINE_COUNTER\") + \"\\\\'\", content, flags=re.MULTILINE))'"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  },
                  {
                     "arguments": [
                        "-c",
                        "python3 -c \"import version; patch = '.' + str(version.patch) if hasattr(version, 'patch') else ''; print(f'{version.major}.{version.minor}{patch}.{version.GODOT_STATUS}.{version.GO_PIPELINE_COUNTER}')\" > bin/version.txt"
                     ],
                     "command": "/bin/bash",
                     "type": "exec",
                     "working_directory": "g"
                  }
               ]
            }
         ],
         "name": "templateStage"
      },
      {
         "jobs": [
            {
               "artifacts": [
                  {
                     "destination": "",
                     "source": "godot.templates.tpz",
                     "type": "build"
                  }
               ],
               "name": "defaultJob",
               "resources": [
                  "linux",
                  "mingw5"
               ],
               "tasks": [
                  {
                     "arguments": [
                        "-c",
                        "rm -rf templates"
                     ],
                     "command": "/bin/bash",
                     "type": "exec"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "version.txt",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "godot.windows.editor.double.x86_64.llvm.pdb",
                     "stage": "defaultStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "windows_debug_x86_64.exe",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "windows_job",
                     "pipeline": "godot-groups-editor",
                     "source": "windows_release_x86_64.exe",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "linux_job",
                     "pipeline": "godot-groups-editor",
                     "source": "linux_debug.x86_64",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "linux_job",
                     "pipeline": "godot-groups-editor",
                     "source": "linux_release.x86_64",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "web_job",
                     "pipeline": "godot-groups-editor",
                     "source": "web_debug.zip",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "artifact_origin": "gocd",
                     "destination": "templates",
                     "is_source_a_file": true,
                     "job": "web_job",
                     "pipeline": "godot-groups-editor",
                     "source": "web_release.zip",
                     "stage": "templateStage",
                     "type": "fetch"
                  },
                  {
                     "arguments": [
                        "-c",
                        "rm -rf godot.templates.tpz"
                     ],
                     "command": "/bin/bash",
                     "type": "exec"
                  },
                  {
                     "arguments": [
                        "-c",
                        "zip -1 godot.templates.tpz templates/*"
                     ],
                     "command": "/bin/bash",
                     "type": "exec"
                  }
               ]
            }
         ],
         "name": "templateZipStage"
      }
   ],
   "timer": {
      "only_on_changes": true,
      "spec": "* * * * * ?"
   }
}
